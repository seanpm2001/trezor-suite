import { fixupConfigRules, fixupPluginRules } from "@eslint/compat";
import _import from "eslint-plugin-import";
import typescriptEslint from "@typescript-eslint/eslint-plugin";
import reactHooks from "eslint-plugin-react-hooks";
import jest from "eslint-plugin-jest";
import chaiFriendly from "eslint-plugin-chai-friendly";
import react from "eslint-plugin-react";
import localRules from "eslint-plugin-local-rules";
import globals from "globals";
import tsParser from "@typescript-eslint/parser";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default [{
    ignores: [

    ],
}, ...fixupConfigRules(compat.extends(
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:import/typescript",
    "plugin:react-hooks/recommended",
)), {
    plugins: {
        import: fixupPluginRules(_import),
        "@typescript-eslint": fixupPluginRules(typescriptEslint),
        "react-hooks": fixupPluginRules(reactHooks),
        jest,
        "chai-friendly": chaiFriendly,
        react: fixupPluginRules(react),
        "local-rules": localRules,
    },

    languageOptions: {
        globals: {
            ...globals.jest,
            ...jest.environments.globals.globals,
        },

        parser: tsParser,
        ecmaVersion: "latest",
        sourceType: "module",

        parserOptions: {
            ecmaFeatures: {
                jsx: true,
            },
        },
    },

    settings: {
        react: {
            version: "detect",
        },

        "import/ignore": ["node_modules", "\\.(coffee|scss|css|less|hbs|svg|json)$"],

        "import/resolver": {
            node: {
                paths: ["/home/user/workspace/trezor/trezor-suite/eslint-rules"],
            },
        },
    },

    rules: {
        "@typescript-eslint/no-empty-object-type": "off",
        "@typescript-eslint/no-require-imports": "off",
        "@typescript-eslint/prefer-ts-expect-error": "error",
        "@typescript-eslint/explicit-function-return-type": "off",

        "func-style": ["error", "declaration", {
            allowArrowFunctions: true,
        }],

        "react/jsx-filename-extension": ["error", {
            extensions: [".tsx"],
        }],

        "import/order": [1, {
            groups: [["builtin", "external"], "internal", ["sibling", "parent"]],

            pathGroups: [{
                pattern: "react*",
                group: "external",
                position: "before",
            }, {
                pattern: "@trezor/**",
                group: "internal",
            }, {
                pattern: "@suite-native/**",
                group: "internal",
            }, {
                pattern: "@suite-common/**",
                group: "internal",
            }, {
                pattern: "src/**",
                group: "internal",
                position: "after",
            }],

            pathGroupsExcludedImportTypes: ["internal", "react"],
            "newlines-between": "always",
        }],

        "import/no-extraneous-dependencies": ["error", {
            devDependencies: [
                "**/*fixtures*/**",
                "**/*.test.{tsx,ts,js}",
                "**/blockchain-link/tests/**",
                "**/blockchain-link/webpack/**",
                "**/suite-desktop-core/**",
                "**/*e2e/**",
                "**/suite/src/support/tests/**",
                "**/suite-data/**",
                "**/*.stories.*",
                "**/*webpack.config*",
                "**/webpack/**",
            ],

            includeTypes: true,
        }],

        "default-case": "off",
        "import/prefer-default-export": "off",
        "import/no-named-as-default": "off",
        "no-nested-ternary": "error",
        "import/no-unresolved": "off",
        "import/extensions": "off",
        "import/no-cycle": "off",

        "import/no-anonymous-default-export": ["error", {
            allowArray: true,
            allowLiteral: true,
            allowObject: true,
        }],

        "react/prop-types": "off",
        "react/no-multi-comp": "off",
        "react/no-unescaped-entities": "off",

        "react/jsx-curly-brace-presence": ["warn", {
            props: "never",
            children: "never",
        }],

        "class-methods-use-this": "off",
        "lines-between-class-members": "off",
        "no-param-reassign": "off",
        "no-plusplus": "off",
        "no-return-assign": "off",
        "consistent-return": "off",

        "no-console": ["error", {
            allow: ["warn", "error"],
        }],

        "no-undef": "off",
        "react/jsx-no-undef": "off",
        "react/react-in-jsx-scope": "off",
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "error",
        "@typescript-eslint/explicit-member-accessibility": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "react/destructuring-assignment": "off",
        "func-names": "off",
        "react/require-default-props": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/triple-slash-reference": "off",
        "react/jsx-props-no-spreading": "off",
        "@typescript-eslint/ban-ts-ignore": "off",
        "@typescript-eslint/no-empty-function": "off",
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "no-dupe-class-members": "off",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["error"],
        "require-await": ["error"],
        "react/display-name": "off",
        "react/jsx-key": "warn",
        "react/prefer-stateless-function": "off",
        "react/no-deprecated": "off",
        "react/no-direct-mutation-state": "off",
        "react/require-render-return": "off",
        "react/no-is-mounted": "off",
        "react/jsx-indent": "off",

        "prefer-destructuring": ["error", {
            VariableDeclarator: {
                array: false,
                object: true,
            },

            AssignmentExpression: {
                array: false,
                object: false,
            },
        }, {
            enforceForRenamedProperties: false,
        }],

        "handle-callback-err": "error",
        "no-mixed-requires": "error",
        "no-new-require": "error",
        "no-path-concat": "error",
        "no-process-exit": "off",
        "no-restricted-modules": "error",
        "no-sync": "off",
        "eol-last": "error",
        "import/no-default-export": "error",
        "no-label-var": "error",
        "no-shadow": "off",

        "@typescript-eslint/no-shadow": ["error", {
            builtinGlobals: true,
            allow: ["_", "error", "resolve", "reject", "fetch"],
        }],

        "no-shadow-restricted-names": "error",
        "no-undefined": "off",
        "no-undef-init": "error",
        "no-unused-vars": "off",
        "no-unused-expressions": 0,
        "prefer-const": "off",
        "chai-friendly/no-unused-expressions": 2,

        "@typescript-eslint/no-unused-vars": ["error", {
            vars: "all",
            args: "none",
            ignoreRestSiblings: true,
            varsIgnorePattern: "^_",
        }],

        "@typescript-eslint/no-restricted-imports": ["error", {
            paths: [{
                name: ".",
            }, {
                name: "..",
            }, {
                name: "../..",
            }],

            patterns: ["@trezor/*/lib", "@trezor/*/lib/**"],
        }],

        "no-restricted-syntax": ["error", {
            message: "Please don't use createAsyncThunk. Use createThunk from @suite-common/redux-utils instead.",
            selector: "CallExpression[callee.name='createAsyncThunk']",
        }, {
            message: "Please don't use getState directly. Always use strongly typed selector, because geState is typed as \"any\" and it's dangerous to use it directly.",
            selector: "MemberExpression[property.type=\"Identifier\"]:matches([object.callee.name=\"getState\"])",
        }, {
            message: "Do not assign \"getState\" directly. Always use strongly typed selector, because geState is typed as \"any\" and it's dangerous to use it directly.",
            selector: "VariableDeclarator[init.type='CallExpression']:matches([init.callee.name='getState'])",
        }, {
            message: "Please don't use \"state\" directly because it's typed as \"any\". Always use it only as parameter for strongly typed selector function.",
            selector: "CallExpression[callee.name='useSelector'] MemberExpression[object.name='state']:matches([property.type='Identifier'])",
        }],

        "object-shorthand": ["error", "always", {
            ignoreConstructors: false,
            avoidQuotes: true,
        }],

        "constructor-super": "error",
        "no-duplicate-imports": "off",

        "no-useless-rename": ["error", {
            ignoreDestructuring: false,
            ignoreImport: false,
            ignoreExport: false,
        }],

        "prefer-numeric-literals": "error",

        "padding-line-between-statements": ["error", {
            blankLine: "always",
            prev: "*",
            next: "return",
        }],

        "local-rules/no-override-ds-component": ["error", {
            packageName: "@trezor/product-components",
        }],
    },
}, {
    files: ["**/*.js"],

    rules: {
        "@typescript-eslint/no-var-requires": "off",
        "no-console": "off",
    },
}, {
    files: [
        "packages/analytics/**/*",
        "packages/blockchain-link/**/*",
        "packages/components/**/*",
        "packages/product-components/**/*",
        "packages/connect/**/*",
        "packages/connect-common/**/*",
        "packages/connect-explorer/**/*",
        "packages/connect-web/**/*",
        "packages/connect-popup/**/*",
        "packages/connect-iframe/**/*",
        "packages/connect-examples/**/*",
        "packages/connect-plugin-ethereum/**/*",
        "packages/connect-plugin-stellar/**/*",
        "packages/request-manager/**/*",
        "packages/suite/**/*",
        "packages/suite-build/**/*",
        "packages/suite-data/**/*",
        "packages/suite-desktop-api/**/*",
        "packages/suite-storage/**/*",
        "packages/suite-web/**/*",
        "packages/transport/**/*",
        "packages/utxo-lib/**/*",
        "scripts/**/*",
        "docs/**/*",
    ],

    rules: {
        "@typescript-eslint/no-shadow": "off",
        "import/no-default-export": "off",
        "import/order": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "no-console": "off",
        "react/jsx-no-undef": "off",
        "no-catch-shadow": "off",
        "@typescript-eslint/no-restricted-imports": "off",
        "no-restricted-syntax": "off",
    },
}, {
    files: ["suite-native/**/*"],

    rules: {
        "@typescript-eslint/no-var-requires": "off",
        "global-require": "off",
    },
}, {
    files: ["**/*.test.*", "**/__tests__/**/*"],

    rules: {
        "import/no-extraneous-dependencies": "off",
        "import/no-unresolved": "off",
        "import/no-default-export": "off",
    },
}];
